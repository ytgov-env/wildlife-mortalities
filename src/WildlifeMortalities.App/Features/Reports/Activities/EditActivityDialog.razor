@implements IDisposable

<EditForm EditContext="_context" OnInvalidSubmit="@(() => _invalidSubmissionDetected = true)" OnValidSubmit="Edit" onkeypress="preventEnterFromSubmitting(event)">
    <FluentValidationValidator/>
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">
                Edit mortality
            </MudText>
        </TitleContent>
        <DialogContent>
            <CascadingValue Name="@Constants.CascadingValues.ReportViewModel" Value="ReportViewModel">
                <CascadingValue Name="@Constants.CascadingValues.EditMode" Value="true">
                    <ActivityComponent ViewModel="ViewModel"/>
                </CascadingValue>
            </CascadingValue>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            @if (_canGoIntoDraftState && _context.GetValidationMessages().Any())
            {
                <MudButton Color="Color.Primary" ButtonType="ButtonType.Button" OnClick="EditDraft">Save as draft</MudButton>
            }
            <MudButton Color="Color.Primary" ButtonType="ButtonType.Submit" Disabled="_context.GetValidationMessages().Any()">Submit</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    private EditContext _context = null!;

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = null!;

    [Parameter]
    public ActivityViewModel ViewModel { get; set; } = null!;

    [Parameter]
    public MortalityReportViewModel ReportViewModel { get; set; } = null!;

    private bool _canGoIntoDraftState;
    private bool _invalidSubmissionDetected;

    protected override void OnInitialized()
    {
        _context = new EditContext(ViewModel);
        _canGoIntoDraftState = ReportViewModel.ReportId == Constants.EfCore.TemporaryAutoGeneratedKey;
        _context.OnFieldChanged += OnFieldChanged;
        base.OnInitialized();
    }

    private void OnFieldChanged(object? sender, FieldChangedEventArgs args)
    {
        if (args.FieldIdentifier.FieldName != nameof(ViewModel.MortalityWithSpeciesSelectionViewModel.Species) && _invalidSubmissionDetected)
        {
            _context.Validate();
            StateHasChanged();
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private void Edit()
    {
        if (_context.Validate())
        {
            ViewModel.MortalityWithSpeciesSelectionViewModel.MortalityViewModel.IsDraft = false;
            MudDialog.Close(DialogResult.Ok(ViewModel));
        }
    }

    private void EditDraft()
    {
        if (_canGoIntoDraftState == false)
        {
            return;
        }

        ViewModel.MortalityWithSpeciesSelectionViewModel.MortalityViewModel.IsDraft = true;
        MudDialog.Close(DialogResult.Ok(ViewModel));
    }

    public void Dispose()
    {
        if (_context != null)
        {
            _context.OnFieldChanged -= OnFieldChanged;
        }
    }

}
