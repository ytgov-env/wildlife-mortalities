@using WildlifeMortalities.Data.Entities
@using WildlifeMortalities.Shared.Services
@using WildlifeMortalities.Data.Enums;
<MudTextField @bind-Value="ViewModel.Landmark" For="(() => ViewModel.Landmark)" Label="Landmark"/>
<MudAutocomplete T="GameManagementArea" Label="Game Management Area" @bind-Value="ViewModel.GameManagementArea" SearchFunc="SearchGameManagementAreas"
                 ToStringFunc="@(x => x == null ? string.Empty : x.Area)" MaxItems="null" Placeholder="Select a GMA" For="@(() => ViewModel.GameManagementArea)"/>
<MudTextField @bind-Value="ViewModel.HrbsNumber" For="(() => ViewModel.HrbsNumber)" Label="HRBS number"/>
@if (ViewModel.MortalityWithSpeciesSelectionViewModel.Species is Species.AmericanBlackBear or Species.Caribou 
    or Species.MuleDeer or Species.Elk or Species.GrizzlyBear or Species.Moose or Species.MountainGoat or Species.ThinhornSheep or Species.WoodBison)
{
    <MudTextField @bind-Value="ViewModel.Seal" For="(() => ViewModel.Seal)" Label="Seal"/>
}

@code {
    private IEnumerable<GameManagementArea> _gameManagementAreas = Array.Empty<GameManagementArea>();

    [Parameter]
    [EditorRequired]
    public HuntedActivityViewModel ViewModel { get; set; } = null!;

    [Inject]
    public IMortalityService MortalityService { get; set; } = null!;


    protected override async Task OnInitializedAsync()
    {
        _gameManagementAreas = await MortalityService.GetGameManagementAreas();
    }

    private async Task<IEnumerable<GameManagementArea>> SearchGameManagementAreas(string value)
    {
        if (string.IsNullOrEmpty(value))
            return _gameManagementAreas;
        return await Task.FromResult(_gameManagementAreas.Where(y => y.Area.StartsWith(value) || (y.Zone + y.Subzone).StartsWith(value)));
    }

}
