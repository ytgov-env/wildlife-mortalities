@using Microsoft.EntityFrameworkCore;
@using WildlifeMortalities.App.Extensions
@using WildlifeMortalities.App.Features.Shared.Mortalities
@using WildlifeMortalities.Data.Entities.BiologicalSubmissions
@using WildlifeMortalities.Data.Entities.BiologicalSubmissions.Shared;
@using WildlifeMortalities.Data.Entities.Reports;
@using WildlifeMortalities.Data.Entities.Reports.SingleMortality;
@using WildlifeMortalities.Data.Enums
@using WildlifeMortalities.Shared.Extensions;
@using WildlifeMortalities.Shared.Services
@using static WildlifeMortalities.Data.Entities.Violation;
@using WildlifeMortalities.Shared.Services.Reports.Single;
@inherits DbContextAwareComponent

<MudCard Elevation="3" Class="flex-column d-flex" Style="height: 100%; min-width: 250px; width: 350px;">
    <MudCardHeader Class="mb-n3">
        <CardHeaderContent>
            @{
                var mortalityName = MortalityViewModel.Species?.GetDisplayName();
            }
            @if (MortalityViewModel.IsDraft)
            {
                <MudText Typo="Typo.h6" Color="Color.Warning">Draft: @mortalityName </MudText>
            }
            else
            {
                <MudText Typo="Typo.h6">@mortalityName</MudText>
            }
        </CardHeaderContent>
        @*<CardHeaderActions>
        @if (ActivityViewModel.Activity != null && ActivityViewModel.Activity.Authorizations.Any())
        {
        <MudMenu Icon="@Icons.Material.Filled.Key">
        @foreach (var authorization in ActivityViewModel.Activity.Authorizations)
        {
        <MudMenuItem>@authorization.Number</MudMenuItem>
        }
        </MudMenu>
        }
        </CardHeaderActions>*@
    </MudCardHeader>
    <MudCardContent Class="flex-column d-flex" Style="height: 100%">
        @if (ActivityViewModel.Activity != null)
        {
            <MudText Typo="Typo.body1">Violations</MudText>
            @if (ActivityViewModel.HasNoViolations == false)
            {
                @foreach (var violations in ActivityViewModel.Activity.Violations.GroupBy(x => x.Severity))
                {
                    <MudAlert Severity="@GetAlertSeverity(violations.Key)" Class="my-1">
                        @foreach (var violation in violations)
                        {
                            <MudText Typo="Typo.body2" Class="my-1">@violation.Description</MudText>
                        }
                    </MudAlert>
                }
            }
            else
            {
                <MudAlert Severity="Severity.Success" Class="my-1">
                    <MudText Typo="Typo.body2" Class="my-1">None</MudText>
                </MudAlert>
            }
        }
        <MudStack Row="false">
            @foreach (var property in MortalityViewModel.GetProperties())
            {
                var normalizedValue = (property.Value ?? string.Empty).ToLower();
                @if (bool.TryParse(property.Value, out var value))
                {
                    <MudCheckBox T="bool" ReadOnly="true" Checked="value" Label="@property.Key" />
                }
                else if (DateTime.TryParse(property.Value, out var dateValue))
                {
                    <MudField DisableUnderLine="true" Label="@property.Key">@dateValue.Date.ToShortDateString()</MudField>
                }
                else
                {
                    <MudField DisableUnderLine="true" Label="@property.Key">@property.Value</MudField>
                }
            }
            @switch (ActivityViewModel)
            {
                case HuntedActivityViewModel vm:
                    @if (!string.IsNullOrWhiteSpace(vm.Landmark))
                    {
                        <MudField DisableUnderLine="true" Label="Landmark">@vm.Landmark</MudField>
                    }
                    <MudField DisableUnderLine="true" Label="Game management area">@vm.GameManagementArea?.Area</MudField>
                    @if (!string.IsNullOrWhiteSpace(vm.HrbsNumber))
                    {
                        <MudField DisableUnderLine="true" Label="HRBS number">@vm.HrbsNumber</MudField>
                    }
                    @if (!string.IsNullOrWhiteSpace(vm.Seal))
                    {
                        <MudField DisableUnderLine="true" Label="Seal">@vm.Seal</MudField>
                    }
                    break;
                case TrappedActivityViewModel vm:
                    break;
            }
            @if (!string.IsNullOrWhiteSpace(ActivityViewModel.Comment))
            {
                <MudField Style="white-space: pre-wrap" DisableUnderLine="true" Label="Comment">@ActivityViewModel.Comment</MudField>
            }
        </MudStack>
        <MudSpacer />
        @if (MortalityViewModel.GetMortality() is IHasBioSubmission)
        {
            <BioSubmissionDetailsComponent BioSubmission="@MortalityViewModel.BioSubmission" Report="Report" BioSubmissionUpdated="@RefreshViolations" />
        }
    </MudCardContent>
    <MudCardActions>
        <MudStack Row="true" Class="justify-right">
            <MudSpacer />
            @if (EnableEdit)
            {
                <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="OnEditClicked" Color="Color.Primary" />
            }
            @if (EnableDelete)
            {
                <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="OnDeleteClicked" Color="Color.Error" />
            }
        </MudStack>
    </MudCardActions>
</MudCard>

@code {

    [Parameter]
    public EventCallback ChangeSpeciesClicked { get; set; }

    [Parameter]
    public Report? Report { get; set; } = null!;

    [Parameter]
    public ActivityViewModel ActivityViewModel { get; set; } = null!;

    public MortalityViewModel MortalityViewModel => ActivityViewModel.MortalityWithSpeciesSelectionViewModel.MortalityViewModel;

    [Parameter]
    public bool EnableBioSubmission { get; set; } = true;

    [Parameter]
    public bool EnableEdit { get; set; } = false;

    [Parameter]
    public bool EnableDelete { get; set; } = false;

    [Parameter]
    public EventCallback OnEditClicked { get; set; }

    [Parameter]
    public EventCallback OnDeleteClicked { get; set; }

    private Severity GetAlertSeverity(SeverityType type) => type switch
    {
        SeverityType.InternalError => Severity.Error,
        SeverityType.Illegal => Severity.Error,
        SeverityType.PotentiallyIllegal => Severity.Warning,
        _ => throw new System.Diagnostics.UnreachableException()
    };

    private void RefreshViolations(ReportDetail reportDetail)
    {
        if (ActivityViewModel.Activity?.Id == null) { return; }
        ActivityViewModel = ActivityViewModel.Create(ActivityViewModel.Activity.Id, reportDetail);
    }
}
