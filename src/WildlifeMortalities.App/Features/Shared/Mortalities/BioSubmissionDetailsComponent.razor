@using WildlifeMortalities.App.Extensions
@using WildlifeMortalities.App.Features.Shared.Mortalities.AmericanBlackBear
@using WildlifeMortalities.App.Features.Shared.Mortalities.CanadaLynx
@using WildlifeMortalities.App.Features.Shared.Mortalities.GreyWolf
@using WildlifeMortalities.App.Features.Shared.Mortalities.GrizzlyBear
@using WildlifeMortalities.App.Features.Shared.Mortalities.MountainGoat
@using WildlifeMortalities.App.Features.Shared.Mortalities.ThinhornSheep
@using WildlifeMortalities.App.Features.Shared.Mortalities.Wolverine
@using WildlifeMortalities.Data.Entities.BiologicalSubmissions
@using WildlifeMortalities.Data.Entities.Reports;
@using WildlifeMortalities.Shared.Extensions;
@using WildlifeMortalities.Shared.Services;

@if (BioSubmission is null)
{
    return;
}

<MudDivider Class="mb-2"/>
<MudStack Row="true" Class="mb-1">
    <MudText Typo="Typo.h6">Biological submission</MudText>
    <MudSpacer />
    @if (BioSubmission.CanBeAnalysed && BioSubmission.HasSubmittedAllRequiredOrganicMaterialPrerequisitesForAnalysis() && 
        (BioSubmission.RequiredOrganicMaterialsStatus != BioSubmissionRequiredOrganicMaterialsStatus.NotStarted))
    {
        <MudMenu Label="Update" Color="Color.Secondary" Variant="Variant.Outlined">
            <MudMenuItem OnClick="OpenOrganicMaterialForBioSubmissionDialog">Samples</MudMenuItem>
            <MudMenuItem OnClick="OpenBioSubmissionAnalysisDialog">Analysis</MudMenuItem>
        </MudMenu>
    } else
    {
        <MudButton OnClick="OpenOrganicMaterialForBioSubmissionDialog" Color="Color.Secondary" Variant="Variant.Outlined">Update</MudButton>
    }
</MudStack>
<MudStack Row="true">
    <MudText>Samples: <MudChip Color="@BioSubmission.RequiredOrganicMaterialsStatus.GetChipColor()">@BioSubmission.RequiredOrganicMaterialsStatus.GetDisplayName().ToLower()</MudChip></MudText>
    @if (BioSubmission.CanBeAnalysed)
    {
        <MudText>Analysis: <MudChip Color="@BioSubmission.AnalysisStatus.GetChipColor()">@BioSubmission.AnalysisStatus.GetDisplayName().ToLower()</MudChip></MudText>
    }
</MudStack>
@if(BioSubmission.DateSubmitted != null)
{
    <MudField Label="Date submitted" DisableUnderLine="true">@BioSubmission.DateSubmitted?.ToString("D")</MudField>
}
@if(BioSubmission.RequiredOrganicMaterialsStatus != BioSubmissionRequiredOrganicMaterialsStatus.NotStarted){
    @*This component is read-only, but it requires an EditForm as the child components contain input components which have a dependancy on EditContext*@
    <EditForm Model="BioSubmission">
        @if(BioSubmission.AnalysisStatus == BioSubmissionAnalysisStatus.Complete)
        {
            @switch (BioSubmission)
            {
                case AmericanBlackBearBioSubmission bioSubmission:
                    <AmericanBlackBearBioSubmissionComponent BioSubmission="bioSubmission" IsReadOnly="true"/>
                    break;
                case CanadaLynxBioSubmission bioSubmission:
                    <CanadaLynxBioSubmissionComponent BioSubmission="bioSubmission" IsReadOnly="true"/>
                    break;
                case GreyWolfBioSubmission bioSubmission:
                    <GreyWolfBioSubmissionComponent BioSubmission="bioSubmission" IsReadOnly="true"/>
                    break;
                case GrizzlyBearBioSubmission bioSubmission:
                    <GrizzlyBearBioSubmissionComponent BioSubmission="bioSubmission" IsReadOnly="true"/>
                    break;
                case MountainGoatBioSubmission bioSubmission:
                    <MountainGoatBioSubmissionComponent BioSubmission="bioSubmission" IsReadOnly="true"/>
                    break;
                case ThinhornSheepBioSubmission bioSubmission:
                    <ThinhornSheepBioSubmissionComponent BioSubmission="bioSubmission" IsReadOnly="true"/>
                    break;
                case WolverineBioSubmission bioSubmission:
                    <WolverineBioSubmissionComponent BioSubmission="bioSubmission" IsReadOnly="true"/>
                    break;
            }
            @if (BioSubmission.Age is not null)
            {
                <MudField Label="Age (years)" DisableUnderLine="true">@BioSubmission.Age.Years</MudField>
                <MudField Label="Confidence in age" DisableUnderLine="true">@BioSubmission.Age.Confidence?.GetDisplayName()</MudField>
            }
        }
        @if (!string.IsNullOrWhiteSpace(BioSubmission.Comment))
        {
            <MudField Style="white-space: pre-wrap" Label="Comment" DisableUnderLine="true">@BioSubmission.Comment</MudField>
        }
    </EditForm>
}


@code {

    [Parameter]
    [EditorRequired]
    public BioSubmission BioSubmission { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public Report Report { get; set; } = null!;

    [Inject]
    IDialogService DialogService { get; set; } = null!;

    [Inject]
    IMortalityService MortalityService { get; set; } = null!;

    [Parameter]
    public EventCallback<ReportDetail> BioSubmissionUpdated { get; set; }

    [CascadingParameter]
    public AppParameters AppParameters { get; set; } = null!;

    private async Task OpenBioSubmissionAnalysisDialog()
    {

        var parameters = new DialogParameters();
        parameters.Add(nameof(BioSubmissionAnalysisDialog.BioSubmission), BioSubmission);
        parameters.Add(nameof(BioSubmissionAnalysisDialog.Report), Report);

        var dialog = await DialogService.ShowAsync<BioSubmissionAnalysisDialog>("", parameters);
        var result = await dialog.Result;

        if (result.Canceled == false)
        {
            Log.Information("Updating bio submission analysis");
            var reportDetail = await MortalityService.UpdateBioSubmissionAnalysis(BioSubmission, Report.Id, AppParameters.UserId);
            Log.Information("Updated bio submission analysis");
            await BioSubmissionUpdated.InvokeAsync(reportDetail);
        }
    }


    private async Task OpenOrganicMaterialForBioSubmissionDialog()
    {

        var parameters = new DialogParameters();
        parameters.Add(nameof(OrganicMaterialForBioSubmissionDialog.BioSubmission), BioSubmission);
        parameters.Add(nameof(OrganicMaterialForBioSubmissionDialog.Report), Report);

        var dialog = await DialogService.ShowAsync<OrganicMaterialForBioSubmissionDialog>("", parameters);
        var result = await dialog.Result;

        if (result.Data is BioSubmissionDialogResult dialogResult)
        {
            if (dialogResult == BioSubmissionDialogResult.Cancel)
            {
                return;
            }

            Log.Information("Updating bio submission organic materials");
            var reportDetail =  await MortalityService.UpdateOrganicMaterialForBioSubmission(BioSubmission, Report.Id, AppParameters.UserId);
            Log.Information("Updated bio submission organic materials");
            await BioSubmissionUpdated.InvokeAsync(reportDetail);

            if (dialogResult == BioSubmissionDialogResult.SubmitAndProceedToAnalysis)
            {
                await OpenBioSubmissionAnalysisDialog();
            }
        }
    }
}
