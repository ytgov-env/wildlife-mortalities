@using WildlifeMortalities.App.Extensions
@using WildlifeMortalities.Data.Entities.BiologicalSubmissions
@using FluentValidation
@using WildlifeMortalities.Data;
@using WildlifeMortalities.Data.Entities.BiologicalSubmissions.Shared;
@using WildlifeMortalities.Shared.Extensions;
@using static WildlifeMortalities.App.Features.Shared.Mortalities.BioSubmissionAnalysisDialog;
@using static WildlifeMortalities.Data.Entities.BiologicalSubmissions.GreyWolfBioSubmission;


<MudSelect T="GreyWolfPeltColour?" @bind-Value="BioSubmission.PeltColour" Label="Pelt colour" For="() => BioSubmission.PeltColour" Disabled="IsReadOnly">
    @foreach (var item in Enum.GetValues<GreyWolfPeltColour>())
    {
        <MudSelectItem T="GreyWolfPeltColour?" Value="item">@item.GetDisplayName()</MudSelectItem>
    }
</MudSelect>

<MudTextField @bind-Value="BioSubmission.FurbearerSealNumber" Label="Furbearer seal" For="() => BioSubmission.FurbearerSealNumber" Disabled="IsReadOnly"/>

@code {
    [Parameter]
    public bool IsReadOnly { get; set; } = false;

    [Parameter]
    [EditorRequired]
    public GreyWolfBioSubmission BioSubmission { get; set; } = null!;

    public class GreyWolfBioSubmissionValidator : BioSubmissionValidator<GreyWolfBioSubmission>
    {
        //private readonly ReadOnlyAppDbContext _context;

        public GreyWolfBioSubmissionValidator()
        {
            RuleFor(x => x.PeltColour).NotNull().IsInEnum();
            RuleFor(x => x.FurbearerSealNumber)
                .NotNull()
                .Matches(@"^\d{5}$")
                .WithMessage("Furbearer seal must be exactly 5 digits.");
            //RuleFor(x => x.FurbearerSealNumber).NotEmpty().MustAsync(BeUnique).WithMessage("This furbearer seal is already associated with a different mortality.");
        }

        //private async Task<bool> BeUnique(string? value, CancellationToken cancellationToken)
        //{
        //    var result = await _context.BioSubmissions.OfType<GreyWolfBioSubmission>()
        //        .AllAsync(x => x.FurbearerSealNumber != value);
        //    return result;
        //}
    }
}
