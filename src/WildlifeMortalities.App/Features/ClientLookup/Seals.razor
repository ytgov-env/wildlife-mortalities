@page "/clients/{clientid:int}/seals"
@using WildlifeMortalities.App.Data

<MudText Typo="Typo.h3" Class="mb-8">Seals (client @ClientId)</MudText>
<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
    <MudTabPanel Text="Hunting">
        <MudTable Items="Client.Seals.Where(s => s.SealType == SealType.Hunting).OrderByDescending(s => s.Year)"
                  ReadOnly="true" T="Seal" OnRowClick="@RowClicked" Hover="true" RowClass="cursor-pointer">
            <FooterContent>
                <MudItem xs="12" Class="d-flex justify-space-between py-2 px-3 mt-2">
                    <MudSwitch @bind-Checked="@ShowOldSeals" Color="Color.Primary">Show expired seals</MudSwitch>
                    <MudButton Color="Color.Tertiary" Variant="Variant.Outlined" Class="my-2 mx-2">New Seal</MudButton>
                </MudItem>
            </FooterContent>
        </MudTable>
    </MudTabPanel>
    <MudTabPanel Text="Trapping">
        <MudTable Hover="true" Items="Client.Seals.Where(s => s.SealType == SealType.Trapping).OrderByDescending(s => s.Year)"
                  ReadOnly="true" T="Seal" OnRowClick="@RowClicked" RowClass="cursor-pointer">

        </MudTable>
    </MudTabPanel>
</MudTabs>

@code {
    [Parameter]
    public int ClientId { get; set; }

    [Inject]
    private NavigationManager Navigation { get; set; } = null!;

    public Client Client { get; set; } = new();

    public bool ShowOldSeals { get; set; } = true;

    protected override Task OnInitializedAsync()
    {
        Client.Id = 42141;
        Client.ClientId = ClientId;
        Client.HasActiveHuntingLicence = true;
        Client.HasActiveTrappingLicence = false;
        Client.ActiveSeals = 3;

        string[] huntedSpecies = new string[] { "Black Bear", "Moose", "Sheep", "Grizzly Bear" };
        string[] trappedSpecies = new string[] { "Beaver", "Muskrat", "Wolf", "Coyote" };
        string[] harvestReportStatus = new string[] { "Not started", "Awaiting bio", "Complete" };

        var rand = new Random();
        Client.Seals.Add(new Seal
            {
                Id = 1,
                Species = "Black Bear",
                Year = 2022,
                SealType = SealType.Hunting,
                HarvestReportStatus = "Not started"
            });
        var counter = 1;
        for (int i = counter; i < rand.Next(3, 7); i++)
        {
            Client.Seals.Add(new Seal
                {
                    Id = i + 1,
                    Species = huntedSpecies[rand.Next(0, 4)],
                    Year = rand.Next(2018, 2023),
                    SealType = SealType.Hunting,
                    HarvestReportStatus = harvestReportStatus[rand.Next(0, 3)]
                });
            counter++;
        }
        for (int i = counter; i < rand.Next(counter + 1, counter + 6); i++)
        {
            Client.Seals.Add(new Seal
                {
                    Id = i + 1,
                    Species = trappedSpecies[rand.Next(0, 4)],
                    Year = rand.Next(2018, 2023),
                    SealType = SealType.Trapping,
                    HarvestReportStatus = harvestReportStatus[rand.Next(0, 3)]
                });
        }
        return base.OnInitializedAsync();
    }

    public void RowClicked(TableRowClickEventArgs<Seal> p)
    {
        if (p.Item.HarvestReportStatus == "Not started")
        {
            Navigation.NavigateTo("/harvest-reports/create/" + p.Item.Id);
        }
        else if (p.Item.HarvestReportStatus == "Awaiting bio")
        {
            Navigation.NavigateTo("/harvest-reports/edit/" + p.Item.Id);
        }
    }
}