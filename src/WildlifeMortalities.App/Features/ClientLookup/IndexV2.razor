@*@page "/"
@page "/{clientid:int}"*@
@page "/v2/clients"
@page "/v2/clients/{clientid:int}"
@using System.Globalization
@using WildlifeMortalities.App.Data
@using WildlifeMortalities.Data.Legacy
@using WildlifeMortalities.Data.Legacy.Entities
@using Dapper

@using Client = WildlifeMortalities.Data.Legacy.Entities.EnvdwEnvClient

<MudGrid>
    <MudItem xs="12" sm="6">
        <MudPaper Elevation="2" Class="pa-4 mb-4">
            <MudForm>
                <MudItem Class="d-flex mt-n3">
                    <MudNumericField @bind-Value="searchInt" Placeholder="Search by Client Id" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"
                                     HideSpinButtons="true" MaxLength="6" />
                    <MudButton Class="ml-10 mt-3" Variant="Variant.Filled" Color="Color.Primary" OnClick="(() => Search(searchInt ?? 0))">Search</MudButton>
                </MudItem>
            </MudForm>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6">
        <MudPaper Elevation="2" Class="pa-4">
            <MudField Label="Client Id">@Client.Envclientid</MudField>
            <MudField Label="Name">@Client.Formattedname</MudField>
            <MudField Label="Birth Date">@Client.Birthdate?.ToLongDateString()</MudField>
        </MudPaper>
    </MudItem>
</MudGrid>

<MudItem Class="mt-3">
    @if (Client.Envclientid is not null)
    {
        <SealsV2 ClientId="@Client.Envclientid" />
    }
</MudItem>

@code {
    [Parameter]
    public int? ClientId { get; set; } = null!;

    private int? searchInt;

    [Inject]
    private NavigationManager Navigation { get; set; } = null!;

    [Inject]
    private LegacyDbContext LegacyDbContext { get; set; } = null!;

    [Inject]
    private ISnackbar SnackBar { get; set; } = null!;

    public List<Client> Clients { get; set; } = new();

    private Client Client { get; set; } = new();

    private List<EnvdwEnvFwHarvest> HarvestReports { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if (ClientId is not null)
        {
            Search((int)ClientId);
        }
        await base.OnInitializedAsync();
    }

    private async void Search(int clientid)
    {
        if (clientid >= 100000 && clientid <= 999999)
        {
            var connection = LegacyDbContext.GetConnection();

            string sql = $"select * from ENVDW_ENV_CLIENT WHERE ENVCLIENTID = {clientid}";
            var temp = await connection.QuerySingleOrDefaultAsync<Client>(sql);
            if (temp is null)
            {
                SnackBar.Add("You have entered an invalid Client ID. Please retry.", severity: Severity.Error);
            }
            else
            {
                Navigation.NavigateTo($"/v2/clients/{clientid}");
                Client = temp;
            }

            connection.Close();
            StateHasChanged();
        }
        else
        {
            SnackBar.Add("You have entered an invalid Client ID. Please retry.", severity: Severity.Error);
        }
    }
}