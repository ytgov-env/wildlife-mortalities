@page "/index"
@using System.Security.Claims

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-16">
    <MudText Typo="Typo.h3" GutterBottom="true">Home</MudText>
    <MudText Typo="Typo.h5" Class="mb-4">Welcome to the Wildlife Mortalities app!</MudText>
    <MudGrid>
        <MudItem xs="12" sm="6">
            <MudAlert Severity="Severity.Normal" Class="mb-4">Feedback/Questions? Contact: <MudLink Href="mailto:jon.hodgins@yukon.ca?subject=WildlifeMortalities - " Typo="Typo.body2" Color="Color.Inherit"><b>jon.hodgins@yukon.ca</b></MudLink></MudAlert>
        </MudItem>
        <MudItem xs="12">
            <MudExpansionPanels>
                <MudExpansionPanel Text="User Claims (debug information)">
                    <MudSimpleTable Style="overflow-x: auto;">
                        <thead>
                            <tr>
                                <th>Type</th>
                                <th>Value</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (AuthState is not null)
                            {
                                @foreach (var claim in AuthState.User.Claims)
                                {
                                    <tr>
                                        <td>@claim.Type</td>
                                        <td>@claim.Value</td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </MudSimpleTable>
                </MudExpansionPanel>
            </MudExpansionPanels>
        </MudItem>
    </MudGrid>

</MudContainer>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; } = null!;
    private AuthenticationState? AuthState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AuthState = await AuthenticationStateTask;
    }
}